name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m pytest test_app.py -v --cov=app --cov-report=term-missing

  deploy:
    runs-on: ubuntu-latest
    needs: test  # Only deploy if tests pass

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy Docker container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Starting deployment..."
            
            # Clone or update repo
            if [ ! -d ~/app ]; then
              git clone https://github.com/${{ github.repository }}.git ~/app
            fi
            cd ~/app
            git pull origin main

            # Stop and remove existing container if it exists
            echo "Stopping existing container..."
            docker stop flask-app || true
            docker rm flask-app || true

            # Build new container
            echo "Building new container..."
            docker build -t flask-app .

            # Check if SSL certificates exist
            SSL_CERT_PATH="/etc/letsencrypt/live/${{ secrets.DOMAIN }}/fullchain.pem"
            SSL_KEY_PATH="/etc/letsencrypt/live/${{ secrets.DOMAIN }}/privkey.pem"
            
            if [ -f "$SSL_CERT_PATH" ] && [ -f "$SSL_KEY_PATH" ]; then
              echo "✅ SSL certificates found, starting with HTTPS..."
              
              # Start container with HTTPS
              docker run -d --name flask-app \
                -p 8080:8080 \
                -p 443:443 \
                -v "$SSL_CERT_PATH:/app/cert.pem:ro" \
                -v "$SSL_KEY_PATH:/app/key.pem:ro" \
                -e FLASK_ENV=production \
                -e APP_NAME=flask-app \
                -e APP_VERSION=1.0.0 \
                -e LOG_LEVEL=INFO \
                -e HEALTH_CHECK_ENABLED=true \
                -e CORS_ENABLED=false \
                -e HTTPS_ENABLED=true \
                -e SSL_CERT_PATH=/app/cert.pem \
                -e SSL_KEY_PATH=/app/key.pem \
                flask-app
            else
              echo "⚠️ SSL certificates not found, starting with HTTP..."
              
              # Start container without HTTPS
              docker run -d --name flask-app \
                -p 8080:8080 \
                -e FLASK_ENV=production \
                -e APP_NAME=flask-app \
                -e APP_VERSION=1.0.0 \
                -e LOG_LEVEL=INFO \
                -e HEALTH_CHECK_ENABLED=true \
                -e CORS_ENABLED=false \
                -e HTTPS_ENABLED=false \
                flask-app
            fi

            # Wait for container to start
            echo "Waiting for container to start..."
            sleep 10

            # Verify container is running
            if docker ps | grep -q flask-app; then
              echo "✅ Docker container is running"
            else
              echo "❌ Docker container failed to start"
              exit 1
            fi

            # Check container health
            echo "Checking container health..."
            if docker inspect --format='{{.State.Health.Status}}' flask-app | grep -q "healthy"; then
              echo "✅ Container is healthy"
            else
              echo "⚠️ Container health check failed, but container is running"
            fi

            # Test health endpoint
            echo "Testing health endpoint..."
            if curl -f http://localhost:8080/health; then
              echo "✅ Health endpoint is responding"
            else
              echo "❌ Health endpoint is not responding"
              exit 1
            fi

            # Test metrics endpoint
            echo "Testing metrics endpoint..."
            if curl -f http://localhost:8080/metrics; then
              echo "✅ Metrics endpoint is responding"
            else
              echo "❌ Metrics endpoint is not responding"
              exit 1
            fi

            # Test config endpoint
            echo "Testing config endpoint..."
            if curl -f http://localhost:8080/config; then
              echo "✅ Config endpoint is responding"
            else
              echo "❌ Config endpoint is not responding"
              exit 1
            fi

            # Test security headers endpoint
            echo "Testing security headers endpoint..."
            if curl -f http://localhost:8080/security-headers; then
              echo "✅ Security headers endpoint is responding"
            else
              echo "❌ Security headers endpoint is not responding"
              exit 1
            fi

            # Test SSL status endpoint
            echo "Testing SSL status endpoint..."
            if curl -f http://localhost:8080/ssl-status; then
              echo "✅ SSL status endpoint is responding"
            else
              echo "❌ SSL status endpoint is not responding"
              exit 1
            fi

            # Test HTTPS if certificates are available
            if [ -f "$SSL_CERT_PATH" ] && [ -f "$SSL_KEY_PATH" ]; then
              echo "Testing HTTPS endpoint..."
              sleep 5  # Give HTTPS a moment to start
              if curl -k -f https://localhost:443/health; then
                echo "✅ HTTPS endpoint is responding"
              else
                echo "⚠️ HTTPS endpoint is not responding (this is normal if certificates are not properly mounted)"
              fi
            fi

            # Show recent logs
            echo "Recent application logs:"
            docker logs --tail 10 flask-app
          EOF

