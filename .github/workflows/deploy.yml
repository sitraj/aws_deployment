name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy app to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Clone or update repo
            if [ ! -d ~/app ]; then
              git clone https://github.com/${{ github.repository }}.git ~/app
            fi
            cd ~/app
            git pull origin main

            # Configure passwordless sudo for the user
            echo "$USER ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/$USER
            sudo chmod 0440 /etc/sudoers.d/$USER

            # Debug: Check if Docker is installed
            echo "Checking Docker installation..."
            if command -v docker &> /dev/null; then
              echo "Docker is installed"
              docker --version
            else
              echo "Docker is not installed, installing now..."
              
              # Update package list
              echo "Updating package list..."
              sudo apt-get update
              
              # Install Docker
              echo "Installing Docker..."
              sudo apt-get install -y docker.io
              
              # Start and enable Docker service
              echo "Starting Docker service..."
              sudo systemctl start docker
              sudo systemctl enable docker
              
              # Create docker group if it doesn't exist
              echo "Setting up docker group..."
              sudo groupadd docker || true
              
              # Add user to docker group
              echo "Adding user to docker group..."
              sudo usermod -aG docker $USER
              
              # Verify Docker installation
              echo "Verifying Docker installation..."
              docker --version || echo "Docker installation failed"
              
              # Apply group changes without requiring logout
              echo "Applying group changes..."
              newgrp docker << EONG
                # Stop and remove existing container if it exists
                docker stop flask-app || true
                docker rm flask-app || true

                # Build and run new container
                docker build -t flask-app .
                docker run -d --name flask-app -p 8080:8080 flask-app

                # Verify container is running
                sleep 2
                if docker ps | grep -q flask-app; then
                  echo '✅ Docker container is running'
                else
                  echo '❌ Docker container failed to start'
                  exit 1
                fi
              EONG
            fi

            # If Docker is already installed, just run the container
            echo "Running container..."
            docker stop flask-app || true
            docker rm flask-app || true
            docker build -t flask-app .
            docker run -d --name flask-app -p 8080:8080 flask-app
            
            # Verify container is running
            sleep 2
            if docker ps | grep -q flask-app; then
              echo "✅ Docker container is running"
            else
              echo "❌ Docker container failed to start"
              exit 1
            fi
          EOF

